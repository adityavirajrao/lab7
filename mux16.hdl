// 16 Bit 2 to 1 mux 

CHIP mux16

{
    IN x[16], y[16],s;
    OUT out[16];

    Parts:

    Not(in=s, out=s1);

    And(a=x[0], b=s1, out=p0);
    And(a=x[1], b=s1, out=p1);
    And(a=x[2], b=s1, out=p2);
    And(a=x[3], b=s1, out=p3);
    And(a=x[4], b=s1, out=p4);
    And(a=x[5], b=s1, out=p5);
    And(a=x[6], b=s1, out=p6);
    And(a=x[7], b=s1, out=p7);
    And(a=x[8], b=s1, out=p8);
    And(a=x[9], b=s1, out=p9);
    And(a=x[10], b=s1, out=p10);
    And(a=x[11], b=s1, out=p11);
    And(a=x[12], b=s1, out=p12);
    And(a=x[13], b=s1, out=p13);
    And(a=x[14], b=s1, out=p14);
    And(a=x[15], b=s1, out=p15);

    And(a=y[0], b=s, out=q0);
    And(a=y[1], b=s, out=q1);
    And(a=y[2], b=s, out=q2);
    And(a=y[3], b=s, out=q3);
    And(a=y[4], b=s, out=q4);
    And(a=y[5], b=s, out=q5);
    And(a=y[6], b=s, out=q6);
    And(a=y[7], b=s, out=q7);
    And(a=y[8], b=s, out=q8);
    And(a=y[9], b=s, out=q9);
    And(a=y[10], b=s, out=q10);
    And(a=y[11], b=s, out=q11);
    And(a=y[12], b=s, out=q12);
    And(a=y[13], b=s, out=q13);
    And(a=y[14], b=s, out=q14);
    And(a=y[15], b=s, out=q15);

    Or(a=p0, b=q0, out=out[0]);
    Or(a=p1, b=q1, out=out[1]);
    Or(a=p2, b=q2, out=out[2]);
    Or(a=p3, b=q3, out=out[3]);
    Or(a=p4, b=q4, out=out[4]);
    Or(a=p5, b=q5, out=out[5]);
    Or(a=p6, b=q6, out=out[6]);
    Or(a=p7, b=q7, out=out[7]);
    Or(a=p8, b=q8, out=out[8]);
    Or(a=p9, b=q9, out=out[9]);
    Or(a=p10, b=q10, out=out[10]);
    Or(a=p11, b=q11, out=out[11]);
    Or(a=p12, b=q12, out=out[12]);
    Or(a=p13, b=q13, out=out[13]);
    Or(a=p14, b=q14, out=out[14]);
    Or(a=p15, b=q15, out=out[15]);
    
}